SCGI for Perl 6
-----------------

This is a simple SCGI library for Perl 6.

It's main influences are the Perl 5 SCGI library, and the
Perl 6 HTTP::Daemon library.

It offers a bit of candy coating compared to the Perl 5 version.

It also offers an optional (but recommended) PSGI interface.

The environment contains three special keys:

  SCGI.Body is the request body (usually from an HTTP POST.)
  SCGI.Object is a reference to the individual request object.
  SCGI.SCGI is a reference to the SCGI object itself.

If you use the PSGI setting, the standard PSGI variables will be added
to the environment too.

Also, you don't need to create your own IO::Socket::INET object.
Just pass an 'addr' and 'port' attribute to the new() declaration and it'll
create the object for you.

Oh yeah, and instead of using the while loop as shown on the Perl 5 SCGI
documentation, there is a convenience method called 'handle' that does
the heavy lifting for you:


  use SCGI;

  my $scgi = SCGI.new( :addr<localhost>, :port(8080), :PSGI );

  my $handler = sub (%env) {
    my $name = %env<QUERY_STRING> // 'world';
    my $status = '200';
    my @headers = [ 'Content-Type' => 'text/plain' ];
    my @body = [ "Hello $name\n" ];
    return [ $status, @headers, @body ];
  }

  $scgi.handle: $handler;


If you are not using the PSGI interface, the output of the handler will be 
sent as the SCGI response, so make sure it is a valid CGI response!

** Apache configuration:

*** If using mod_scgi:

Add the following line to your site config, changing the details to match your
SCGI script configuration:

  SCGIMount /scgi/ 127.0.0.1:8118

*** If using mod_proxy_scgi:

Add the following line to your site config, changes the details to match your
SCGI script configuration:

  <Proxy *>
    Order deny,allow
    Allow from all
  </Proxy>
  ProxyPass /scgi/ scgi://localhost:8118/

*** Apache redirect rules

Regardless of whether you are using mod_scgi or mod_proxy_scgi, you can
use the following steps to redirect non-exitent pages to your SCGI script.

Add the following lines either after the above statement, or in an
.htaccess file in your website root:

  RewriteEngine On

  ## Add additional rules before the following!
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteRule ^(.*)$ /scgi/$1 [QSA,L,PT]

That's it. Now any path that doesn't match an existing file in your
web root, will be redirected to your SCGI script.

Similar tricks are available for other web servers, but I haven't tested
them, so have not documented them. A quick Google search for SCGI should
turn up a multitude of howto documents.

** Requirements:

 * Rakudo Perl 6  <http://rakudo.org/>
 * HTTP::Status   <http://github.com/supernovus/perl6-http-status/>

Author: Timothy Totten (supernovus) <2010@huri.net> http://huri.net/

Released under the Artisitc License 2.0

